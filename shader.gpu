// Vertex shader
const vertexShaderSource = `
attribute vec3 vertex;
attribute vec2 textCoords;

uniform mat4 ModelViewMatrix;
uniform mat4 ProjectionMatrix;

varying vec2 vTextCoords;

void main() {
    vec4 vertPos4 = ModelViewMatrix * vec4(vertex, 1.0);
    vec3 vertPos = vec3(vertPos4) / vertPos4.w;
    vTextCoords = textCoords;
    gl_Position = ProjectionMatrix*vertPos4;
}`;

// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif

varying vec2 vTextCoords;
uniform sampler2D uTexture;

void main() {
    vec4 texture = texture2D(uTexture, vTextCoords);
    gl_FragColor = texture;
}`;